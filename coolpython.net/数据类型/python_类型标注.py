# 类型标注
# 1. 动态类型与静态类型
# 静态与动态类型化是软件工程中的热门话题，每个人都有自己的独道简洁，python作为一种动态类型语言，这使得程序不需要指定变量的类型，这一点是不会改变的。
# 但python创始人Guido van Rossum在python3.5中引入了一个类型系统，它允许开发人员指定变量类型，主要作用是便于开发维护代码，供IDE和开发工具使用，
# 对代码运行不产生任何影响，运行时会过滤类型信息。
#
# 对于这个新的特性，我个人是非常喜欢的，python在构建大型项目上一直遭人诟病，除了自身性能在个别领域不尽如人意外，动态类型的语言特点也使得python并不
# 适合构建大型项目。
#
# 构建大型项目对于python来说是一个技术可行但工程上困难重重的事情，设想你编写了一个函数，定义了若干个参数，期初你还记得这些参数的类型是什么，但天长日
# 久，写了几万行代码之后你还会记得这个函数的参数最初都是如何定义的么？倘若你自己已经遗忘，又如何要求其他人能够读懂并维护你的代码呢？其他强类型语言诸
# 如C++, java 在定义变量时必须指定其类型，因此在维护代码方面，及时缺少注释也仍然可以通过阅读代码来获取变量的信息，而python不可以，如果python开发
# 人员不注意变量命名规则，也不喜欢写注释，相信我，python的代码真的很难理解和维护，尤其在使用了一大堆诸如装饰器等特性之后，理解起来更是难上加难。

# 2. 类型标注
def add(x: int, y: int) -> int:
    return x + y

# print(add(3, 4.3)) # 提示错误
print(add(3, 4))
